/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { GetJumpGate200Response } from '../models';
import { GetMarket200Response } from '../models';
import { GetShipyard200Response } from '../models';
import { GetSystem200Response } from '../models';
import { GetSystemWaypoints200Response } from '../models';
import { GetSystems200Response } from '../models';
import { GetWaypoint200Response } from '../models';
/**
 * SystemsApi - axios parameter creator
 * @export
 */
export declare const SystemsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get jump gate details for a waypoint.
     * @summary Get Jump Gate
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJumpGate: (systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @summary Get Market
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarket: (systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @summary Get Shipyard
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipyard: (systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the details of a system.
     * @summary Get System
     * @param {string} systemSymbol The system symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystem: (systemSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @summary List Waypoints
     * @param {string} systemSymbol The system symbol
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemWaypoints: (systemSymbol: string, page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a list of all systems.
     * @summary List Systems
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystems: (page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * View the details of a waypoint.
     * @summary Get Waypoint
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWaypoint: (systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SystemsApi - functional programming interface
 * @export
 */
export declare const SystemsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get jump gate details for a waypoint.
     * @summary Get Jump Gate
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJumpGate(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetJumpGate200Response>>;
    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @summary Get Market
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarket(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetMarket200Response>>;
    /**
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @summary Get Shipyard
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipyard(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetShipyard200Response>>;
    /**
     * Get the details of a system.
     * @summary Get System
     * @param {string} systemSymbol The system symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystem(systemSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetSystem200Response>>;
    /**
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @summary List Waypoints
     * @param {string} systemSymbol The system symbol
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemWaypoints(systemSymbol: string, page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetSystemWaypoints200Response>>;
    /**
     * Return a list of all systems.
     * @summary List Systems
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystems(page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetSystems200Response>>;
    /**
     * View the details of a waypoint.
     * @summary Get Waypoint
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWaypoint(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetWaypoint200Response>>;
};
/**
 * SystemsApi - factory interface
 * @export
 */
export declare const SystemsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Get jump gate details for a waypoint.
     * @summary Get Jump Gate
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJumpGate(systemSymbol: string, waypointSymbol: string, options?: any): AxiosPromise<GetJumpGate200Response>;
    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @summary Get Market
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarket(systemSymbol: string, waypointSymbol: string, options?: any): AxiosPromise<GetMarket200Response>;
    /**
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @summary Get Shipyard
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipyard(systemSymbol: string, waypointSymbol: string, options?: any): AxiosPromise<GetShipyard200Response>;
    /**
     * Get the details of a system.
     * @summary Get System
     * @param {string} systemSymbol The system symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystem(systemSymbol: string, options?: any): AxiosPromise<GetSystem200Response>;
    /**
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @summary List Waypoints
     * @param {string} systemSymbol The system symbol
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemWaypoints(systemSymbol: string, page?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<GetSystemWaypoints200Response>;
    /**
     * Return a list of all systems.
     * @summary List Systems
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystems(page?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<GetSystems200Response>;
    /**
     * View the details of a waypoint.
     * @summary Get Waypoint
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWaypoint(systemSymbol: string, waypointSymbol: string, options?: any): AxiosPromise<GetWaypoint200Response>;
};
/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export declare class SystemsApi extends BaseAPI {
    /**
     * Get jump gate details for a waypoint.
     * @summary Get Jump Gate
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getJumpGate(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetJumpGate200Response, any>>;
    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     * @summary Get Market
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getMarket(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMarket200Response, any>>;
    /**
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     * @summary Get Shipyard
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getShipyard(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetShipyard200Response, any>>;
    /**
     * Get the details of a system.
     * @summary Get System
     * @param {string} systemSymbol The system symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getSystem(systemSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSystem200Response, any>>;
    /**
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     * @summary List Waypoints
     * @param {string} systemSymbol The system symbol
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getSystemWaypoints(systemSymbol: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSystemWaypoints200Response, any>>;
    /**
     * Return a list of all systems.
     * @summary List Systems
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getSystems(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSystems200Response, any>>;
    /**
     * View the details of a waypoint.
     * @summary Get Waypoint
     * @param {string} systemSymbol The system symbol
     * @param {string} waypointSymbol The waypoint symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    getWaypoint(systemSymbol: string, waypointSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetWaypoint200Response, any>>;
}
//# sourceMappingURL=systems-api.d.ts.map