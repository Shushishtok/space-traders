/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { GetFaction200Response } from '../models';
import { GetFactions200Response } from '../models';
/**
 * FactionsApi - axios parameter creator
 * @export
 */
export declare const FactionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * View the details of a faction.
     * @summary Get Faction
     * @param {string} factionSymbol The faction symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFaction: (factionSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all discovered factions in the game.
     * @summary List Factions
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFactions: (page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FactionsApi - functional programming interface
 * @export
 */
export declare const FactionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * View the details of a faction.
     * @summary Get Faction
     * @param {string} factionSymbol The faction symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFaction(factionSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetFaction200Response>>;
    /**
     * List all discovered factions in the game.
     * @summary List Factions
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFactions(page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetFactions200Response>>;
};
/**
 * FactionsApi - factory interface
 * @export
 */
export declare const FactionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * View the details of a faction.
     * @summary Get Faction
     * @param {string} factionSymbol The faction symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFaction(factionSymbol: string, options?: any): AxiosPromise<GetFaction200Response>;
    /**
     * List all discovered factions in the game.
     * @summary List Factions
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFactions(page?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<GetFactions200Response>;
};
/**
 * FactionsApi - object-oriented interface
 * @export
 * @class FactionsApi
 * @extends {BaseAPI}
 */
export declare class FactionsApi extends BaseAPI {
    /**
     * View the details of a faction.
     * @summary Get Faction
     * @param {string} factionSymbol The faction symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactionsApi
     */
    getFaction(factionSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFaction200Response, any>>;
    /**
     * List all discovered factions in the game.
     * @summary List Factions
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactionsApi
     */
    getFactions(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFactions200Response, any>>;
}
//# sourceMappingURL=factions-api.d.ts.map