"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractsApi = exports.ContractsApiFactory = exports.ContractsApiFp = exports.ContractsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ContractsApi - axios parameter creator
 * @export
 */
const ContractsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Accept a contract.
         * @summary Accept Contract
         * @param {string} contractId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptContract: (contractId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contractId' is not null or undefined
            common_1.assertParamExists('acceptContract', 'contractId', contractId);
            const localVarPath = `/my/contracts/{contractId}/accept`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deliver cargo on a given contract.
         * @summary Deliver Contract
         * @param {string} contractId The ID of the contract
         * @param {DeliverContractRequest} [deliverContractRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliverContract: (contractId, deliverContractRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contractId' is not null or undefined
            common_1.assertParamExists('deliverContract', 'contractId', contractId);
            const localVarPath = `/my/contracts/{contractId}/deliver`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deliverContractRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fulfill a contract
         * @summary Fulfill Contract
         * @param {string} contractId The ID of the contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fulfillContract: (contractId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contractId' is not null or undefined
            common_1.assertParamExists('fulfillContract', 'contractId', contractId);
            const localVarPath = `/my/contracts/{contractId}/fulfill`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the details of a contract by ID.
         * @summary Get Contract
         * @param {string} contractId The contract ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract: (contractId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contractId' is not null or undefined
            common_1.assertParamExists('getContract', 'contractId', contractId);
            const localVarPath = `/my/contracts/{contractId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all of your contracts.
         * @summary List Contracts
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts: (page, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/my/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ContractsApiAxiosParamCreator = ContractsApiAxiosParamCreator;
/**
 * ContractsApi - functional programming interface
 * @export
 */
const ContractsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ContractsApiAxiosParamCreator(configuration);
    return {
        /**
         * Accept a contract.
         * @summary Accept Contract
         * @param {string} contractId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptContract(contractId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acceptContract(contractId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deliver cargo on a given contract.
         * @summary Deliver Contract
         * @param {string} contractId The ID of the contract
         * @param {DeliverContractRequest} [deliverContractRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliverContract(contractId, deliverContractRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deliverContract(contractId, deliverContractRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fulfill a contract
         * @summary Fulfill Contract
         * @param {string} contractId The ID of the contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fulfillContract(contractId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fulfillContract(contractId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the details of a contract by ID.
         * @summary Get Contract
         * @param {string} contractId The contract ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract(contractId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getContract(contractId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List all of your contracts.
         * @summary List Contracts
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts(page, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getContracts(page, limit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ContractsApiFp = ContractsApiFp;
/**
 * ContractsApi - factory interface
 * @export
 */
const ContractsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ContractsApiFp(configuration);
    return {
        /**
         * Accept a contract.
         * @summary Accept Contract
         * @param {string} contractId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptContract(contractId, options) {
            return localVarFp.acceptContract(contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deliver cargo on a given contract.
         * @summary Deliver Contract
         * @param {string} contractId The ID of the contract
         * @param {DeliverContractRequest} [deliverContractRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliverContract(contractId, deliverContractRequest, options) {
            return localVarFp.deliverContract(contractId, deliverContractRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fulfill a contract
         * @summary Fulfill Contract
         * @param {string} contractId The ID of the contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fulfillContract(contractId, options) {
            return localVarFp.fulfillContract(contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a contract by ID.
         * @summary Get Contract
         * @param {string} contractId The contract ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract(contractId, options) {
            return localVarFp.getContract(contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all of your contracts.
         * @summary List Contracts
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts(page, limit, options) {
            return localVarFp.getContracts(page, limit, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ContractsApiFactory = ContractsApiFactory;
/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
class ContractsApi extends base_1.BaseAPI {
    /**
     * Accept a contract.
     * @summary Accept Contract
     * @param {string} contractId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    acceptContract(contractId, options) {
        return exports.ContractsApiFp(this.configuration).acceptContract(contractId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deliver cargo on a given contract.
     * @summary Deliver Contract
     * @param {string} contractId The ID of the contract
     * @param {DeliverContractRequest} [deliverContractRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    deliverContract(contractId, deliverContractRequest, options) {
        return exports.ContractsApiFp(this.configuration).deliverContract(contractId, deliverContractRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fulfill a contract
     * @summary Fulfill Contract
     * @param {string} contractId The ID of the contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    fulfillContract(contractId, options) {
        return exports.ContractsApiFp(this.configuration).fulfillContract(contractId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the details of a contract by ID.
     * @summary Get Contract
     * @param {string} contractId The contract ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    getContract(contractId, options) {
        return exports.ContractsApiFp(this.configuration).getContract(contractId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all of your contracts.
     * @summary List Contracts
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    getContracts(page, limit, options) {
        return exports.ContractsApiFp(this.configuration).getContracts(page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ContractsApi = ContractsApi;
//# sourceMappingURL=contracts-api.js.map