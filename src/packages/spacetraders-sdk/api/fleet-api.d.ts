/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateChart201Response } from '../models';
import { CreateShipShipScan201Response } from '../models';
import { CreateShipSystemScan201Response } from '../models';
import { CreateShipWaypointScan201Response } from '../models';
import { CreateSurvey201Response } from '../models';
import { DockShip200Response } from '../models';
import { ExtractResources201Response } from '../models';
import { ExtractResourcesRequest } from '../models';
import { GetMyShip200Response } from '../models';
import { GetMyShipCargo200Response } from '../models';
import { GetMyShips200Response } from '../models';
import { GetShipCooldown200Response } from '../models';
import { GetShipNav200Response } from '../models';
import { Jettison200Response } from '../models';
import { JettisonRequest } from '../models';
import { JumpShip200Response } from '../models';
import { JumpShipRequest } from '../models';
import { NavigateShip200Response } from '../models';
import { NavigateShipRequest } from '../models';
import { OrbitShip200Response } from '../models';
import { PatchShipNavRequest } from '../models';
import { PurchaseCargo201Response } from '../models';
import { PurchaseCargoRequest } from '../models';
import { PurchaseShip201Response } from '../models';
import { PurchaseShipRequest } from '../models';
import { RefuelShip200Response } from '../models';
import { SellCargo201Response } from '../models';
import { SellCargoRequest } from '../models';
import { ShipRefine200Response } from '../models';
import { ShipRefineRequest } from '../models';
import { TransferCargo200Response } from '../models';
import { TransferCargoRequest } from '../models';
/**
 * FleetApi - axios parameter creator
 * @export
 */
export declare const FleetApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @summary Create Chart
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChart: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * @summary Scan Ships
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipShipScan: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * @summary Scan Systems
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipSystemScan: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * @summary Scan Waypoints
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipWaypointScan: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @summary Create Survey
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSurvey: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @summary Dock Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dockShip: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @summary Extract Resources
     * @param {string} shipSymbol The ship symbol
     * @param {ExtractResourcesRequest} [extractResourcesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extractResources: (shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the details of your ship.
     * @summary Get Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShip: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the cargo of your ship.
     * @summary Get Ship Cargo
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShipCargo: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve all of your ships.
     * @summary List Ships
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShips: (page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @summary Get Ship Cooldown
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipCooldown: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the current nav status of a ship.
     * @summary Get Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipNav: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Jettison cargo from your ship\'s cargo hold.
     * @summary Jettison Cargo
     * @param {string} shipSymbol
     * @param {JettisonRequest} [jettisonRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jettison: (shipSymbol: string, jettisonRequest?: JettisonRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @summary Jump Ship
     * @param {string} shipSymbol
     * @param {JumpShipRequest} [jumpShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jumpShip: (shipSymbol: string, jumpShipRequest?: JumpShipRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * @summary Navigate Ship
     * @param {string} shipSymbol The ship symbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    navigateShip: (shipSymbol: string, navigateShipRequest?: NavigateShipRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @summary Orbit Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orbitShip: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the nav data of a ship, such as the flight mode.
     * @summary Patch Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {PatchShipNavRequest} [patchShipNavRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchShipNav: (shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Purchase cargo.
     * @summary Purchase Cargo
     * @param {string} shipSymbol
     * @param {PurchaseCargoRequest} [purchaseCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseCargo: (shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Purchase a ship
     * @summary Purchase Ship
     * @param {PurchaseShipRequest} [purchaseShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseShip: (purchaseShipRequest?: PurchaseShipRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Refuel your ship from the local market.
     * @summary Refuel Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refuelShip: (shipSymbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sell cargo.
     * @summary Sell Cargo
     * @param {string} shipSymbol
     * @param {SellCargoRequest} [sellCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sellCargo: (shipSymbol: string, sellCargoRequest?: SellCargoRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @summary Ship Refine
     * @param {string} shipSymbol The symbol of the ship
     * @param {ShipRefineRequest} [shipRefineRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipRefine: (shipSymbol: string, shipRefineRequest?: ShipRefineRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Transfer cargo between ships.
     * @summary Transfer Cargo
     * @param {string} shipSymbol
     * @param {TransferCargoRequest} [transferCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferCargo: (shipSymbol: string, transferCargoRequest?: TransferCargoRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * @summary Warp Ship
     * @param {string} shipSymbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    warpShip: (shipSymbol: string, navigateShipRequest?: NavigateShipRequest | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FleetApi - functional programming interface
 * @export
 */
export declare const FleetApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @summary Create Chart
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChart(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreateChart201Response>>;
    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * @summary Scan Ships
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipShipScan(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreateShipShipScan201Response>>;
    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * @summary Scan Systems
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipSystemScan(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreateShipSystemScan201Response>>;
    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * @summary Scan Waypoints
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipWaypointScan(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreateShipWaypointScan201Response>>;
    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @summary Create Survey
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSurvey(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CreateSurvey201Response>>;
    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @summary Dock Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dockShip(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DockShip200Response>>;
    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @summary Extract Resources
     * @param {string} shipSymbol The ship symbol
     * @param {ExtractResourcesRequest} [extractResourcesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extractResources(shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ExtractResources201Response>>;
    /**
     * Retrieve the details of your ship.
     * @summary Get Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShip(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetMyShip200Response>>;
    /**
     * Retrieve the cargo of your ship.
     * @summary Get Ship Cargo
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShipCargo(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetMyShipCargo200Response>>;
    /**
     * Retrieve all of your ships.
     * @summary List Ships
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShips(page?: number | undefined, limit?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetMyShips200Response>>;
    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @summary Get Ship Cooldown
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipCooldown(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetShipCooldown200Response>>;
    /**
     * Get the current nav status of a ship.
     * @summary Get Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipNav(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetShipNav200Response>>;
    /**
     * Jettison cargo from your ship\'s cargo hold.
     * @summary Jettison Cargo
     * @param {string} shipSymbol
     * @param {JettisonRequest} [jettisonRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jettison(shipSymbol: string, jettisonRequest?: JettisonRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Jettison200Response>>;
    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @summary Jump Ship
     * @param {string} shipSymbol
     * @param {JumpShipRequest} [jumpShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jumpShip(shipSymbol: string, jumpShipRequest?: JumpShipRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JumpShip200Response>>;
    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * @summary Navigate Ship
     * @param {string} shipSymbol The ship symbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    navigateShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NavigateShip200Response>>;
    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @summary Orbit Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orbitShip(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OrbitShip200Response>>;
    /**
     * Update the nav data of a ship, such as the flight mode.
     * @summary Patch Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {PatchShipNavRequest} [patchShipNavRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchShipNav(shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetShipNav200Response>>;
    /**
     * Purchase cargo.
     * @summary Purchase Cargo
     * @param {string} shipSymbol
     * @param {PurchaseCargoRequest} [purchaseCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseCargo(shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PurchaseCargo201Response>>;
    /**
     * Purchase a ship
     * @summary Purchase Ship
     * @param {PurchaseShipRequest} [purchaseShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseShip(purchaseShipRequest?: PurchaseShipRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PurchaseShip201Response>>;
    /**
     * Refuel your ship from the local market.
     * @summary Refuel Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refuelShip(shipSymbol: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<RefuelShip200Response>>;
    /**
     * Sell cargo.
     * @summary Sell Cargo
     * @param {string} shipSymbol
     * @param {SellCargoRequest} [sellCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sellCargo(shipSymbol: string, sellCargoRequest?: SellCargoRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SellCargo201Response>>;
    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @summary Ship Refine
     * @param {string} shipSymbol The symbol of the ship
     * @param {ShipRefineRequest} [shipRefineRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipRefine(shipSymbol: string, shipRefineRequest?: ShipRefineRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ShipRefine200Response>>;
    /**
     * Transfer cargo between ships.
     * @summary Transfer Cargo
     * @param {string} shipSymbol
     * @param {TransferCargoRequest} [transferCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferCargo(shipSymbol: string, transferCargoRequest?: TransferCargoRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransferCargo200Response>>;
    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * @summary Warp Ship
     * @param {string} shipSymbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    warpShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NavigateShip200Response>>;
};
/**
 * FleetApi - factory interface
 * @export
 */
export declare const FleetApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @summary Create Chart
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChart(shipSymbol: string, options?: any): AxiosPromise<CreateChart201Response>;
    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * @summary Scan Ships
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipShipScan(shipSymbol: string, options?: any): AxiosPromise<CreateShipShipScan201Response>;
    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * @summary Scan Systems
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipSystemScan(shipSymbol: string, options?: any): AxiosPromise<CreateShipSystemScan201Response>;
    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * @summary Scan Waypoints
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShipWaypointScan(shipSymbol: string, options?: any): AxiosPromise<CreateShipWaypointScan201Response>;
    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @summary Create Survey
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSurvey(shipSymbol: string, options?: any): AxiosPromise<CreateSurvey201Response>;
    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @summary Dock Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dockShip(shipSymbol: string, options?: any): AxiosPromise<DockShip200Response>;
    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @summary Extract Resources
     * @param {string} shipSymbol The ship symbol
     * @param {ExtractResourcesRequest} [extractResourcesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extractResources(shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest | undefined, options?: any): AxiosPromise<ExtractResources201Response>;
    /**
     * Retrieve the details of your ship.
     * @summary Get Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShip(shipSymbol: string, options?: any): AxiosPromise<GetMyShip200Response>;
    /**
     * Retrieve the cargo of your ship.
     * @summary Get Ship Cargo
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShipCargo(shipSymbol: string, options?: any): AxiosPromise<GetMyShipCargo200Response>;
    /**
     * Retrieve all of your ships.
     * @summary List Ships
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyShips(page?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<GetMyShips200Response>;
    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @summary Get Ship Cooldown
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipCooldown(shipSymbol: string, options?: any): AxiosPromise<GetShipCooldown200Response>;
    /**
     * Get the current nav status of a ship.
     * @summary Get Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipNav(shipSymbol: string, options?: any): AxiosPromise<GetShipNav200Response>;
    /**
     * Jettison cargo from your ship\'s cargo hold.
     * @summary Jettison Cargo
     * @param {string} shipSymbol
     * @param {JettisonRequest} [jettisonRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jettison(shipSymbol: string, jettisonRequest?: JettisonRequest | undefined, options?: any): AxiosPromise<Jettison200Response>;
    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @summary Jump Ship
     * @param {string} shipSymbol
     * @param {JumpShipRequest} [jumpShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jumpShip(shipSymbol: string, jumpShipRequest?: JumpShipRequest | undefined, options?: any): AxiosPromise<JumpShip200Response>;
    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * @summary Navigate Ship
     * @param {string} shipSymbol The ship symbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    navigateShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest | undefined, options?: any): AxiosPromise<NavigateShip200Response>;
    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @summary Orbit Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orbitShip(shipSymbol: string, options?: any): AxiosPromise<OrbitShip200Response>;
    /**
     * Update the nav data of a ship, such as the flight mode.
     * @summary Patch Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {PatchShipNavRequest} [patchShipNavRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchShipNav(shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest | undefined, options?: any): AxiosPromise<GetShipNav200Response>;
    /**
     * Purchase cargo.
     * @summary Purchase Cargo
     * @param {string} shipSymbol
     * @param {PurchaseCargoRequest} [purchaseCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseCargo(shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest | undefined, options?: any): AxiosPromise<PurchaseCargo201Response>;
    /**
     * Purchase a ship
     * @summary Purchase Ship
     * @param {PurchaseShipRequest} [purchaseShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchaseShip(purchaseShipRequest?: PurchaseShipRequest | undefined, options?: any): AxiosPromise<PurchaseShip201Response>;
    /**
     * Refuel your ship from the local market.
     * @summary Refuel Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refuelShip(shipSymbol: string, options?: any): AxiosPromise<RefuelShip200Response>;
    /**
     * Sell cargo.
     * @summary Sell Cargo
     * @param {string} shipSymbol
     * @param {SellCargoRequest} [sellCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sellCargo(shipSymbol: string, sellCargoRequest?: SellCargoRequest | undefined, options?: any): AxiosPromise<SellCargo201Response>;
    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @summary Ship Refine
     * @param {string} shipSymbol The symbol of the ship
     * @param {ShipRefineRequest} [shipRefineRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shipRefine(shipSymbol: string, shipRefineRequest?: ShipRefineRequest | undefined, options?: any): AxiosPromise<ShipRefine200Response>;
    /**
     * Transfer cargo between ships.
     * @summary Transfer Cargo
     * @param {string} shipSymbol
     * @param {TransferCargoRequest} [transferCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferCargo(shipSymbol: string, transferCargoRequest?: TransferCargoRequest | undefined, options?: any): AxiosPromise<TransferCargo200Response>;
    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * @summary Warp Ship
     * @param {string} shipSymbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    warpShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest | undefined, options?: any): AxiosPromise<NavigateShip200Response>;
};
/**
 * FleetApi - object-oriented interface
 * @export
 * @class FleetApi
 * @extends {BaseAPI}
 */
export declare class FleetApi extends BaseAPI {
    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @summary Create Chart
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createChart(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateChart201Response, any>>;
    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * @summary Scan Ships
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createShipShipScan(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateShipShipScan201Response, any>>;
    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * @summary Scan Systems
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createShipSystemScan(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateShipSystemScan201Response, any>>;
    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * @summary Scan Waypoints
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createShipWaypointScan(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateShipWaypointScan201Response, any>>;
    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @summary Create Survey
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createSurvey(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateSurvey201Response, any>>;
    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @summary Dock Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    dockShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DockShip200Response, any>>;
    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @summary Extract Resources
     * @param {string} shipSymbol The ship symbol
     * @param {ExtractResourcesRequest} [extractResourcesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    extractResources(shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExtractResources201Response, any>>;
    /**
     * Retrieve the details of your ship.
     * @summary Get Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getMyShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMyShip200Response, any>>;
    /**
     * Retrieve the cargo of your ship.
     * @summary Get Ship Cargo
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getMyShipCargo(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMyShipCargo200Response, any>>;
    /**
     * Retrieve all of your ships.
     * @summary List Ships
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getMyShips(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMyShips200Response, any>>;
    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @summary Get Ship Cooldown
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getShipCooldown(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetShipCooldown200Response, any>>;
    /**
     * Get the current nav status of a ship.
     * @summary Get Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getShipNav(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetShipNav200Response, any>>;
    /**
     * Jettison cargo from your ship\'s cargo hold.
     * @summary Jettison Cargo
     * @param {string} shipSymbol
     * @param {JettisonRequest} [jettisonRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    jettison(shipSymbol: string, jettisonRequest?: JettisonRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Jettison200Response, any>>;
    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @summary Jump Ship
     * @param {string} shipSymbol
     * @param {JumpShipRequest} [jumpShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    jumpShip(shipSymbol: string, jumpShipRequest?: JumpShipRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<JumpShip200Response, any>>;
    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * @summary Navigate Ship
     * @param {string} shipSymbol The ship symbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    navigateShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NavigateShip200Response, any>>;
    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @summary Orbit Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    orbitShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrbitShip200Response, any>>;
    /**
     * Update the nav data of a ship, such as the flight mode.
     * @summary Patch Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {PatchShipNavRequest} [patchShipNavRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    patchShipNav(shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetShipNav200Response, any>>;
    /**
     * Purchase cargo.
     * @summary Purchase Cargo
     * @param {string} shipSymbol
     * @param {PurchaseCargoRequest} [purchaseCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    purchaseCargo(shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PurchaseCargo201Response, any>>;
    /**
     * Purchase a ship
     * @summary Purchase Ship
     * @param {PurchaseShipRequest} [purchaseShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    purchaseShip(purchaseShipRequest?: PurchaseShipRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PurchaseShip201Response, any>>;
    /**
     * Refuel your ship from the local market.
     * @summary Refuel Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    refuelShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefuelShip200Response, any>>;
    /**
     * Sell cargo.
     * @summary Sell Cargo
     * @param {string} shipSymbol
     * @param {SellCargoRequest} [sellCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    sellCargo(shipSymbol: string, sellCargoRequest?: SellCargoRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SellCargo201Response, any>>;
    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @summary Ship Refine
     * @param {string} shipSymbol The symbol of the ship
     * @param {ShipRefineRequest} [shipRefineRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    shipRefine(shipSymbol: string, shipRefineRequest?: ShipRefineRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ShipRefine200Response, any>>;
    /**
     * Transfer cargo between ships.
     * @summary Transfer Cargo
     * @param {string} shipSymbol
     * @param {TransferCargoRequest} [transferCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    transferCargo(shipSymbol: string, transferCargoRequest?: TransferCargoRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransferCargo200Response, any>>;
    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * @summary Warp Ship
     * @param {string} shipSymbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    warpShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NavigateShip200Response, any>>;
}
//# sourceMappingURL=fleet-api.d.ts.map