"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FleetApi = exports.FleetApiFactory = exports.FleetApiFp = exports.FleetApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * FleetApi - axios parameter creator
 * @export
 */
const FleetApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
         * @summary Create Chart
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChart: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('createChart', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/chart`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Activate your ship\'s sensor arrays to scan for ship information.
         * @summary Scan Ships
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipShipScan: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('createShipShipScan', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/scan/ships`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Activate your ship\'s sensor arrays to scan for system information.
         * @summary Scan Systems
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipSystemScan: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('createShipSystemScan', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/scan/systems`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Activate your ship\'s sensor arrays to scan for waypoint information.
         * @summary Scan Waypoints
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipWaypointScan: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('createShipWaypointScan', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/scan/waypoints`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
         * @summary Create Survey
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurvey: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('createSurvey', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/survey`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
         * @summary Dock Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dockShip: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('dockShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/dock`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
         * @summary Extract Resources
         * @param {string} shipSymbol The ship symbol
         * @param {ExtractResourcesRequest} [extractResourcesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractResources: (shipSymbol, extractResourcesRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('extractResources', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/extract`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(extractResourcesRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve the details of your ship.
         * @summary Get Ship
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShip: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('getMyShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve the cargo of your ship.
         * @summary Get Ship Cargo
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShipCargo: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('getMyShipCargo', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/cargo`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve all of your ships.
         * @summary List Ships
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShips: (page, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/my/ships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
         * @summary Get Ship Cooldown
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipCooldown: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('getShipCooldown', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/cooldown`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the current nav status of a ship.
         * @summary Get Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipNav: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('getShipNav', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/nav`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Jettison cargo from your ship\'s cargo hold.
         * @summary Jettison Cargo
         * @param {string} shipSymbol
         * @param {JettisonRequest} [jettisonRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jettison: (shipSymbol, jettisonRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('jettison', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/jettison`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(jettisonRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
         * @summary Jump Ship
         * @param {string} shipSymbol
         * @param {JumpShipRequest} [jumpShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jumpShip: (shipSymbol, jumpShipRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('jumpShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/jump`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(jumpShipRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
         * @summary Navigate Ship
         * @param {string} shipSymbol The ship symbol
         * @param {NavigateShipRequest} [navigateShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navigateShip: (shipSymbol, navigateShipRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('navigateShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/navigate`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(navigateShipRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
         * @summary Orbit Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orbitShip: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('orbitShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/orbit`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update the nav data of a ship, such as the flight mode.
         * @summary Patch Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {PatchShipNavRequest} [patchShipNavRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipNav: (shipSymbol, patchShipNavRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('patchShipNav', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/nav`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(patchShipNavRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Purchase cargo.
         * @summary Purchase Cargo
         * @param {string} shipSymbol
         * @param {PurchaseCargoRequest} [purchaseCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseCargo: (shipSymbol, purchaseCargoRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('purchaseCargo', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/purchase`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(purchaseCargoRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Purchase a ship
         * @summary Purchase Ship
         * @param {PurchaseShipRequest} [purchaseShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShip: (purchaseShipRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/my/ships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(purchaseShipRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refuel your ship from the local market.
         * @summary Refuel Ship
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refuelShip: (shipSymbol, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('refuelShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/refuel`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sell cargo.
         * @summary Sell Cargo
         * @param {string} shipSymbol
         * @param {SellCargoRequest} [sellCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellCargo: (shipSymbol, sellCargoRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('sellCargo', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/sell`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sellCargoRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
         * @summary Ship Refine
         * @param {string} shipSymbol The symbol of the ship
         * @param {ShipRefineRequest} [shipRefineRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipRefine: (shipSymbol, shipRefineRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('shipRefine', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/refine`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(shipRefineRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Transfer cargo between ships.
         * @summary Transfer Cargo
         * @param {string} shipSymbol
         * @param {TransferCargoRequest} [transferCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCargo: (shipSymbol, transferCargoRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('transferCargo', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/transfer`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCargoRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
         * @summary Warp Ship
         * @param {string} shipSymbol
         * @param {NavigateShipRequest} [navigateShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warpShip: (shipSymbol, navigateShipRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'shipSymbol' is not null or undefined
            common_1.assertParamExists('warpShip', 'shipSymbol', shipSymbol);
            const localVarPath = `/my/ships/{shipSymbol}/warp`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AgentToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(navigateShipRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FleetApiAxiosParamCreator = FleetApiAxiosParamCreator;
/**
 * FleetApi - functional programming interface
 * @export
 */
const FleetApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.FleetApiAxiosParamCreator(configuration);
    return {
        /**
         * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
         * @summary Create Chart
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChart(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createChart(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Activate your ship\'s sensor arrays to scan for ship information.
         * @summary Scan Ships
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipShipScan(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createShipShipScan(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Activate your ship\'s sensor arrays to scan for system information.
         * @summary Scan Systems
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipSystemScan(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createShipSystemScan(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Activate your ship\'s sensor arrays to scan for waypoint information.
         * @summary Scan Waypoints
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipWaypointScan(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createShipWaypointScan(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
         * @summary Create Survey
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurvey(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSurvey(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
         * @summary Dock Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dockShip(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.dockShip(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
         * @summary Extract Resources
         * @param {string} shipSymbol The ship symbol
         * @param {ExtractResourcesRequest} [extractResourcesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractResources(shipSymbol, extractResourcesRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.extractResources(shipSymbol, extractResourcesRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve the details of your ship.
         * @summary Get Ship
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShip(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMyShip(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve the cargo of your ship.
         * @summary Get Ship Cargo
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShipCargo(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMyShipCargo(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve all of your ships.
         * @summary List Ships
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShips(page, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMyShips(page, limit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
         * @summary Get Ship Cooldown
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipCooldown(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getShipCooldown(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the current nav status of a ship.
         * @summary Get Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipNav(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getShipNav(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Jettison cargo from your ship\'s cargo hold.
         * @summary Jettison Cargo
         * @param {string} shipSymbol
         * @param {JettisonRequest} [jettisonRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jettison(shipSymbol, jettisonRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.jettison(shipSymbol, jettisonRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
         * @summary Jump Ship
         * @param {string} shipSymbol
         * @param {JumpShipRequest} [jumpShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jumpShip(shipSymbol, jumpShipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.jumpShip(shipSymbol, jumpShipRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
         * @summary Navigate Ship
         * @param {string} shipSymbol The ship symbol
         * @param {NavigateShipRequest} [navigateShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navigateShip(shipSymbol, navigateShipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.navigateShip(shipSymbol, navigateShipRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
         * @summary Orbit Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orbitShip(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.orbitShip(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update the nav data of a ship, such as the flight mode.
         * @summary Patch Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {PatchShipNavRequest} [patchShipNavRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipNav(shipSymbol, patchShipNavRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.patchShipNav(shipSymbol, patchShipNavRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Purchase cargo.
         * @summary Purchase Cargo
         * @param {string} shipSymbol
         * @param {PurchaseCargoRequest} [purchaseCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseCargo(shipSymbol, purchaseCargoRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.purchaseCargo(shipSymbol, purchaseCargoRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Purchase a ship
         * @summary Purchase Ship
         * @param {PurchaseShipRequest} [purchaseShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShip(purchaseShipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.purchaseShip(purchaseShipRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Refuel your ship from the local market.
         * @summary Refuel Ship
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refuelShip(shipSymbol, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refuelShip(shipSymbol, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Sell cargo.
         * @summary Sell Cargo
         * @param {string} shipSymbol
         * @param {SellCargoRequest} [sellCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellCargo(shipSymbol, sellCargoRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sellCargo(shipSymbol, sellCargoRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
         * @summary Ship Refine
         * @param {string} shipSymbol The symbol of the ship
         * @param {ShipRefineRequest} [shipRefineRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipRefine(shipSymbol, shipRefineRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.shipRefine(shipSymbol, shipRefineRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Transfer cargo between ships.
         * @summary Transfer Cargo
         * @param {string} shipSymbol
         * @param {TransferCargoRequest} [transferCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCargo(shipSymbol, transferCargoRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCargo(shipSymbol, transferCargoRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
         * @summary Warp Ship
         * @param {string} shipSymbol
         * @param {NavigateShipRequest} [navigateShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warpShip(shipSymbol, navigateShipRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.warpShip(shipSymbol, navigateShipRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FleetApiFp = FleetApiFp;
/**
 * FleetApi - factory interface
 * @export
 */
const FleetApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.FleetApiFp(configuration);
    return {
        /**
         * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
         * @summary Create Chart
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChart(shipSymbol, options) {
            return localVarFp.createChart(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate your ship\'s sensor arrays to scan for ship information.
         * @summary Scan Ships
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipShipScan(shipSymbol, options) {
            return localVarFp.createShipShipScan(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate your ship\'s sensor arrays to scan for system information.
         * @summary Scan Systems
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipSystemScan(shipSymbol, options) {
            return localVarFp.createShipSystemScan(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate your ship\'s sensor arrays to scan for waypoint information.
         * @summary Scan Waypoints
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipWaypointScan(shipSymbol, options) {
            return localVarFp.createShipWaypointScan(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
         * @summary Create Survey
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurvey(shipSymbol, options) {
            return localVarFp.createSurvey(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
         * @summary Dock Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dockShip(shipSymbol, options) {
            return localVarFp.dockShip(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
         * @summary Extract Resources
         * @param {string} shipSymbol The ship symbol
         * @param {ExtractResourcesRequest} [extractResourcesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractResources(shipSymbol, extractResourcesRequest, options) {
            return localVarFp.extractResources(shipSymbol, extractResourcesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of your ship.
         * @summary Get Ship
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShip(shipSymbol, options) {
            return localVarFp.getMyShip(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the cargo of your ship.
         * @summary Get Ship Cargo
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShipCargo(shipSymbol, options) {
            return localVarFp.getMyShipCargo(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all of your ships.
         * @summary List Ships
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShips(page, limit, options) {
            return localVarFp.getMyShips(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
         * @summary Get Ship Cooldown
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipCooldown(shipSymbol, options) {
            return localVarFp.getShipCooldown(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current nav status of a ship.
         * @summary Get Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipNav(shipSymbol, options) {
            return localVarFp.getShipNav(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Jettison cargo from your ship\'s cargo hold.
         * @summary Jettison Cargo
         * @param {string} shipSymbol
         * @param {JettisonRequest} [jettisonRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jettison(shipSymbol, jettisonRequest, options) {
            return localVarFp.jettison(shipSymbol, jettisonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
         * @summary Jump Ship
         * @param {string} shipSymbol
         * @param {JumpShipRequest} [jumpShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jumpShip(shipSymbol, jumpShipRequest, options) {
            return localVarFp.jumpShip(shipSymbol, jumpShipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
         * @summary Navigate Ship
         * @param {string} shipSymbol The ship symbol
         * @param {NavigateShipRequest} [navigateShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navigateShip(shipSymbol, navigateShipRequest, options) {
            return localVarFp.navigateShip(shipSymbol, navigateShipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
         * @summary Orbit Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orbitShip(shipSymbol, options) {
            return localVarFp.orbitShip(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the nav data of a ship, such as the flight mode.
         * @summary Patch Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {PatchShipNavRequest} [patchShipNavRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipNav(shipSymbol, patchShipNavRequest, options) {
            return localVarFp.patchShipNav(shipSymbol, patchShipNavRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchase cargo.
         * @summary Purchase Cargo
         * @param {string} shipSymbol
         * @param {PurchaseCargoRequest} [purchaseCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseCargo(shipSymbol, purchaseCargoRequest, options) {
            return localVarFp.purchaseCargo(shipSymbol, purchaseCargoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchase a ship
         * @summary Purchase Ship
         * @param {PurchaseShipRequest} [purchaseShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShip(purchaseShipRequest, options) {
            return localVarFp.purchaseShip(purchaseShipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refuel your ship from the local market.
         * @summary Refuel Ship
         * @param {string} shipSymbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refuelShip(shipSymbol, options) {
            return localVarFp.refuelShip(shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Sell cargo.
         * @summary Sell Cargo
         * @param {string} shipSymbol
         * @param {SellCargoRequest} [sellCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellCargo(shipSymbol, sellCargoRequest, options) {
            return localVarFp.sellCargo(shipSymbol, sellCargoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
         * @summary Ship Refine
         * @param {string} shipSymbol The symbol of the ship
         * @param {ShipRefineRequest} [shipRefineRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipRefine(shipSymbol, shipRefineRequest, options) {
            return localVarFp.shipRefine(shipSymbol, shipRefineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer cargo between ships.
         * @summary Transfer Cargo
         * @param {string} shipSymbol
         * @param {TransferCargoRequest} [transferCargoRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCargo(shipSymbol, transferCargoRequest, options) {
            return localVarFp.transferCargo(shipSymbol, transferCargoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
         * @summary Warp Ship
         * @param {string} shipSymbol
         * @param {NavigateShipRequest} [navigateShipRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warpShip(shipSymbol, navigateShipRequest, options) {
            return localVarFp.warpShip(shipSymbol, navigateShipRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FleetApiFactory = FleetApiFactory;
/**
 * FleetApi - object-oriented interface
 * @export
 * @class FleetApi
 * @extends {BaseAPI}
 */
class FleetApi extends base_1.BaseAPI {
    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @summary Create Chart
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createChart(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).createChart(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * @summary Scan Ships
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createShipShipScan(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).createShipShipScan(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * @summary Scan Systems
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createShipSystemScan(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).createShipSystemScan(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * @summary Scan Waypoints
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createShipWaypointScan(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).createShipWaypointScan(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @summary Create Survey
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    createSurvey(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).createSurvey(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @summary Dock Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    dockShip(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).dockShip(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @summary Extract Resources
     * @param {string} shipSymbol The ship symbol
     * @param {ExtractResourcesRequest} [extractResourcesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    extractResources(shipSymbol, extractResourcesRequest, options) {
        return exports.FleetApiFp(this.configuration).extractResources(shipSymbol, extractResourcesRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the details of your ship.
     * @summary Get Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getMyShip(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).getMyShip(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the cargo of your ship.
     * @summary Get Ship Cargo
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getMyShipCargo(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).getMyShipCargo(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve all of your ships.
     * @summary List Ships
     * @param {number} [page] What entry offset to request
     * @param {number} [limit] How many entries to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getMyShips(page, limit, options) {
        return exports.FleetApiFp(this.configuration).getMyShips(page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @summary Get Ship Cooldown
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getShipCooldown(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).getShipCooldown(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current nav status of a ship.
     * @summary Get Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    getShipNav(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).getShipNav(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Jettison cargo from your ship\'s cargo hold.
     * @summary Jettison Cargo
     * @param {string} shipSymbol
     * @param {JettisonRequest} [jettisonRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    jettison(shipSymbol, jettisonRequest, options) {
        return exports.FleetApiFp(this.configuration).jettison(shipSymbol, jettisonRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     * @summary Jump Ship
     * @param {string} shipSymbol
     * @param {JumpShipRequest} [jumpShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    jumpShip(shipSymbol, jumpShipRequest, options) {
        return exports.FleetApiFp(this.configuration).jumpShip(shipSymbol, jumpShipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * @summary Navigate Ship
     * @param {string} shipSymbol The ship symbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    navigateShip(shipSymbol, navigateShipRequest, options) {
        return exports.FleetApiFp(this.configuration).navigateShip(shipSymbol, navigateShipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @summary Orbit Ship
     * @param {string} shipSymbol The symbol of the ship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    orbitShip(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).orbitShip(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the nav data of a ship, such as the flight mode.
     * @summary Patch Ship Nav
     * @param {string} shipSymbol The ship symbol
     * @param {PatchShipNavRequest} [patchShipNavRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    patchShipNav(shipSymbol, patchShipNavRequest, options) {
        return exports.FleetApiFp(this.configuration).patchShipNav(shipSymbol, patchShipNavRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Purchase cargo.
     * @summary Purchase Cargo
     * @param {string} shipSymbol
     * @param {PurchaseCargoRequest} [purchaseCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    purchaseCargo(shipSymbol, purchaseCargoRequest, options) {
        return exports.FleetApiFp(this.configuration).purchaseCargo(shipSymbol, purchaseCargoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Purchase a ship
     * @summary Purchase Ship
     * @param {PurchaseShipRequest} [purchaseShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    purchaseShip(purchaseShipRequest, options) {
        return exports.FleetApiFp(this.configuration).purchaseShip(purchaseShipRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refuel your ship from the local market.
     * @summary Refuel Ship
     * @param {string} shipSymbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    refuelShip(shipSymbol, options) {
        return exports.FleetApiFp(this.configuration).refuelShip(shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sell cargo.
     * @summary Sell Cargo
     * @param {string} shipSymbol
     * @param {SellCargoRequest} [sellCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    sellCargo(shipSymbol, sellCargoRequest, options) {
        return exports.FleetApiFp(this.configuration).sellCargo(shipSymbol, sellCargoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @summary Ship Refine
     * @param {string} shipSymbol The symbol of the ship
     * @param {ShipRefineRequest} [shipRefineRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    shipRefine(shipSymbol, shipRefineRequest, options) {
        return exports.FleetApiFp(this.configuration).shipRefine(shipSymbol, shipRefineRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Transfer cargo between ships.
     * @summary Transfer Cargo
     * @param {string} shipSymbol
     * @param {TransferCargoRequest} [transferCargoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    transferCargo(shipSymbol, transferCargoRequest, options) {
        return exports.FleetApiFp(this.configuration).transferCargo(shipSymbol, transferCargoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * @summary Warp Ship
     * @param {string} shipSymbol
     * @param {NavigateShipRequest} [navigateShipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    warpShip(shipSymbol, navigateShipRequest, options) {
        return exports.FleetApiFp(this.configuration).warpShip(shipSymbol, navigateShipRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FleetApi = FleetApi;
//# sourceMappingURL=fleet-api.js.map